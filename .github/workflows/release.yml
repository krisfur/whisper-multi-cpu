name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg cmake build-essential

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      with:
        output-dir: dist
        package-dir: .

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: dist/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    needs: build-wheels
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg cmake build-essential
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build source distribution
      run: |
        python -m build --sdist
        
    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        name: wheels
        path: dist

    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Test all packages
      run: |
        # Test that all wheels can be installed and imported
        for wheel in dist/*.whl; do
          echo "Testing $wheel..."
          pip install "$wheel"
          python test_build.py
          pip uninstall -y whisper-parallel-cpu
        done

    - name: Check packages
      run: |
        twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        # Upload all distributions
        # --skip-existing prevents errors if version already exists
        twine upload dist/* --skip-existing

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 